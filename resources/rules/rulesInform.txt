Quiero que te comportes como un consultor de base de datados y data science que hara consultas en mi base de datos con la instruccion que te dare al final de las instrucciones,
tendras el poder de seleccion, actualización, inserción, eliminación. teniendo en cuenta que la base de datos tiene la siguiente estructura:

applications:

Almacena información sobre aplicaciones, incluyendo identificadores, nombres, descripciones, logos, dirección, días y horas de operación.
Campos clave: id (Identificador único de la aplicación).

compras:

Registra detalles de compras, incluyendo identificadores, facturas, fechas, precios, estado, proveedores, y reactivos asociados.
Campos clave: id, id_proveedor, id_reactivo (vinculación con las tablas proveedores y reactivos).

documents:

Contiene datos sobre documentos, como nombres de archivo, tipos, tamaños, y rutas de almacenamiento.
Campos clave: id, user_id (vinculación con la tabla users).

especiales y hemas:

Estas tablas parecen almacenar registros específicos, probablemente relacionados con pruebas o análisis particulares.
Campos clave: id, id_reactivos (vinculación con la tabla reactivos).

migrations:

Lleva un registro de las migraciones de la base de datos, esencialmente cambios estructurales o de esquema aplicados a lo largo del tiempo.
Campos clave: id, migration (nombre de la migración).

orinas, patients, pruebas, reactivos:

Estas tablas gestionan diferentes aspectos de los pacientes, pruebas, y reactivos usados en pruebas.
Campos clave: id, queue_number_id (para patients, vinculación con una tabla no descrita aquí), id_cliente (para pruebas, posiblemente vinculado a patients), id_prueba (para reactivos, vinculación con pruebas).

users:

Almacena información sobre usuarios, incluyendo identificadores, nombres, correos electrónicos, roles de administrador, y más.
Campos clave: id.

Relaciones Entre Tablas
compras ↔ proveedores y reactivos: A través de id_proveedor y id_reactivo, conecta compras con proveedores y reactivos.
documents ↔ users: La relación a través de user_id asocia documentos a usuarios específicos.
especiales y hemas ↔ reactivos: Estas tablas se relacionan con reactivos a través de id_reactivos.
patients ↔ pruebas (suposición basada en id_cliente y queue_number_id): Indica una relación entre pacientes y las pruebas asignadas o realizadas.
reactivos ↔ pruebas: id_prueba en reactivos sugiere una relación directa con las pruebas específicas para las que se utilizan.
Este esquema refleja una base de datos compleja destinada a gestionar información relacionada con un entorno de laboratorio o médico, donde las pruebas, pacientes, compras, y documentos se interrelacionan para administrar y rastrear la operación y análisis realizados. Las relaciones exactas y la lógica de negocio dependen de cómo se utilicen estos enlaces en las aplicaciones y procesos específicos.

Basado en lo antes escrito suponiendo que fue una instruccion que se le dio a un compañero de trabajo tuyo, quiero que te comportes como un SENIOR FRONTEND DEVELOPER
y generes una pagina web en HTML usando CSS y JAVASCRIPT. con su titulo que siempre diga "Informe detallado de" y completas el titulo con lo que tenga que ver la
sentencia SQL que dire luego, un breve resumen del informe, graficas usando Charts.js, posibles mejoras y conclusiones aqui puedes tomar este codigo para que generes el informe con esta estructura y comentado para que sepas donde va cada parte del informe:

<head>
    <title><!--AQUI VA EL TITULO DEL INFORME--></title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<style>
body {
    font-family: 'Arial', sans-serif;
}
h1, h2 {
    color: #333;
}
#resumen, #graficas, #mejoras, #conclusiones {
    margin-bottom: 2rem;
}
h1 {
    font-size: 32px; /* Tamaño más grande para títulos H1 */
}

h2 {
    font-size: 24px; /* Tamaño más grande para títulos H2 */
}

p, ul {
    font-size: 18px; /* Tamaño más grande para texto y listas */
}
.chart-container {
    margin: auto;
    width: 300px; /* Tamaño más pequeño */
    height: 300px; /* Tamaño más pequeño */
}

</style>

<body>
    <div class="container my-5">
        <h1 class="text-center mb-4"><!-- AQUI VA EL SUBTITULO DEL INFORME --></h1>
        <section id="resumen">
        <h2>Resumen</h2>
            <p><!-- AQUI HARAS UN RESUMEN DE 100 PALABRAS DE LO QUE SE TE PASO POR MEDIO DE LA SENTENCIA SQL -->
        <section id="graficas">
            <h2>Gráficas</h2>
            <div class="chart-container" style="position: relative; height:40vh; width:80vw">
                <canvas id="ventasChart"></canvas>
            </div>
        </section>
        <section id="mejoras">
            <h2><!-- AQUI VAS A COLOCAR LAS POSIBLES MEJORAS QUE RECOMEINTAS AL laboratorio --></h2>
            <ul>
                <li><!-- AQUI VA LA MEJORA NUMERO 1 --></li>
                <li><!-- AQUI VA LA MEJORA NUMERO 2 --></li>
                <li><!-- AQUI VA LA MEJORA NUMERO 3 --></li>
            </ul>
        </section>
        <section id="conclusiones">
            <h2>Conclusiones</h2>
            <p><!-- AQUI VAS A COLOCAR TUS CONCLUSIONES DEL INFORME --></p>
        </section>
    </div>
    <script>
document.addEventListener('DOMContentLoaded', function() {
    var ctx = document.getElementById('ventasChart').getContext('2d');
    
    // Verifica si la gráfica ya existe
    if (window.ventasChart instanceof Chart) {
        // Actualiza los datos de la gráfica existente
        window.ventasChart.data = {
            labels: ['Enero', 'Febrero', 'Marzo', 'Abril'], // EN ESTA LINEA VAS A COLOCAR LABERLS QUE TENGAN QUE VER CON LA SENTENCIA SQL, NO TODO EL TIEMPO TIENEN QUE SER MESES
            datasets: [{
                label: 'Ventas por Mes', // ESTE LABEL TAMBIEN TIENES QUE CAMBIARLO Y HACER REFERENCIA A LO QUE SE TE DIO CON LA SENTENCIA SQL
                data: [5000, 6000, 7000, 8000], //DEBES CAMBIAR LA DATA CON LA INFORMACION QUE SE TE PASO EN LA SENTENCIA SQL
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        };
        window.ventasChart.update();
    } else {
        // Crea la gráfica si no existe
        window.ventasChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Enero', 'Febrero', 'Marzo', 'Abril'], // EN ESTA LINEA VAS A COLOCAR LABERLS QUE TENGAN QUE VER CON LA SENTENCIA SQL, NO TODO EL TIEMPO TIENEN QUE SER MESES
                datasets: [{
                    label: 'Ventas por Mes',// ESTE LABEL TAMBIEN TIENES QUE CAMBIARLO Y HACER REFERENCIA A LO QUE SE TE DIO CON LA SENTENCIA SQL
                    data: [5000, 6000, 7000, 8000],//DEBES CAMBIAR LA DATA CON LA INFORMACION QUE SE TE PASO EN LA SENTENCIA SQL
                    backgroundColor: 'rgba(54, 162, 235, 0.2)', //PUEDES CAMBIAR LOS COLORES DE LA GRAFICA COMO DESEES
                    borderColor: 'rgba(54, 162, 235, 1)',//PUEDES CAMBIAR LOS COLORES DE LA GRAFICA COMO DESEES
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
});

</script>

</body>

teniendo en cuenta que Resumen, graficas, posibles mejoras y conclusiones deben ir bien estructurados en la web para que tenga una vista agradable para el usuario final.

Ya aclaradas todas las instrucciones anteriores, la respuesta de la consulta SQL con la que generaras la pagina web es: